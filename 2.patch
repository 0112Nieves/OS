diff --git a/Makefile b/Makefile
index 39a99d7..10a4475 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_echo2\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/console.c b/kernel/console.c
index 05dc526..8cdeb38 100644
--- a/kernel/console.c
+++ b/kernel/console.c
@@ -50,6 +50,11 @@ struct {
   uint r;  // Read index
   uint w;  // Write index
   uint e;  // Edit index
+  char histBuf[5][INPUT_BUF_SIZE];
+  int histIndex;
+  int currentIndex;
+  int histSize;
+  int histOffset;
 } cons;
 
 //
@@ -138,6 +143,66 @@ consoleintr(int c)
   acquire(&cons.lock);
 
   switch(c){
+  case C('W'):
+	if (cons.histOffset == cons.histSize) {
+		printf("\a");
+		break;
+	}
+	cons.histOffset ++;
+    // kill line first
+    while(cons.e != cons.w &&
+          cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+      cons.e--;
+      consputc(BACKSPACE);
+    }
+    if (cons.histIndex == 0)
+		cons.histIndex = 4;
+	else
+		cons.histIndex --;
+    for (int i = 0; i < INPUT_BUF_SIZE; i++) {
+		if (cons.histBuf[cons.histIndex][i] != '\n') {
+			consputc(cons.histBuf[cons.histIndex][i]);
+			cons.buf[cons.e++ % INPUT_BUF_SIZE] = cons.histBuf[cons.histIndex][i];
+		} else {
+			break;
+		}
+	}
+    break;
+//  case 'l':
+//    printf("hi");
+//    cons.buf[cons.e++ % INPUT_BUF_SIZE] = 'l';
+//    break;
+  case C('S'):
+    if (cons.histOffset <= 1) {
+		// kill line first
+		while(cons.e != cons.w &&
+		  cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+			cons.e--;
+			consputc(BACKSPACE);
+		}
+		printf("\a");
+		break;
+	}
+	cons.histOffset --;
+    // kill line first
+    while(cons.e != cons.w &&
+          cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+      cons.e--;
+      consputc(BACKSPACE);
+    }
+    if (cons.histIndex == 4)
+		cons.histIndex = 0;
+	else
+		cons.histIndex ++;
+    for (int i = 0; i < INPUT_BUF_SIZE; i++) {
+		if (cons.histBuf[cons.histIndex][i] != '\n') {
+			consputc(cons.histBuf[cons.histIndex][i]);
+			cons.buf[cons.e++ % INPUT_BUF_SIZE] = cons.histBuf[cons.histIndex][i];
+		} else {
+			break;
+		}
+	}
+    break;
   case C('P'):  // Print process list.
     procdump();
     break;
@@ -166,6 +231,24 @@ consoleintr(int c)
       cons.buf[cons.e++ % INPUT_BUF_SIZE] = c;
 
       if(c == '\n' || c == C('D') || cons.e-cons.r == INPUT_BUF_SIZE){
+        // copy this line of command into a history buffer
+        uint i = cons.e-1;
+		while(i != cons.w &&
+         cons.buf[(i-1) % INPUT_BUF_SIZE] != '\n'){
+			i--;
+		}
+       int j = 0;
+		while(i != cons.e) {
+			cons.histBuf[cons.currentIndex][j] = cons.buf[i % INPUT_BUF_SIZE];
+			i++; j++;
+       }
+		cons.currentIndex = (cons.currentIndex + 1) % 5;
+		cons.histIndex = cons.currentIndex;
+		if (cons.histSize < 5)
+			cons.histSize ++;
+		cons.histOffset = 0;
+		//printf("\n", cons.buf[i]);
+
         // wake up consoleread() if a whole line (or end-of-file)
         // has arrived.
         cons.w = cons.e;
@@ -182,6 +265,10 @@ void
 consoleinit(void)
 {
   initlock(&cons.lock, "cons");
+  cons.histIndex = 0;
+  cons.currentIndex = 0;
+  cons.histSize = 0;
+  cons.histOffset = 0;
 
   uartinit();
 
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..edf5381 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -8,6 +8,7 @@
 #include "elf.h"
 
 static int loadseg(pde_t *, uint64, struct inode *, uint, uint);
+extern struct proc *initproc;
 
 int flags2perm(int flags)
 {
@@ -91,6 +92,16 @@ exec(char *path, char **argv)
   for(argc = 0; argv[argc]; argc++) {
     if(argc >= MAXARG)
       goto bad;
+    if (!argv[argc+1]) { // i.e., it is the last argument
+      if (argv[argc][0] == '&') { // is background process
+	      //printf("bg_process --- reparent it to init\n");
+	      p->parent = initproc;
+			acquire(&tickslock);
+			p->tick_exec = ticks;
+			release(&tickslock);
+	      break;
+      }
+    }
     sp -= strlen(argv[argc]) + 1;
     sp -= sp % 16; // riscv sp must be 16-byte aligned
     if(sp < stackbase)
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..8a3c1eb 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -365,6 +365,14 @@ exit(int status)
   end_op();
   p->cwd = 0;
 
+  if (p->parent == initproc)
+  {
+	acquire(&tickslock);
+	p->tick_exit = ticks;
+	release(&tickslock);
+	printf("%d Done\t\t%s %d\n", p->pid, p->name, p->tick_exit - p->tick_exec);
+  }
+
   acquire(&wait_lock);
 
   // Give any children to init.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..4a62637 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint tick_exec;
+  uint tick_exit;
 };
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..74177b8 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -67,6 +67,7 @@ timerinit()
 
   // ask the CLINT for a timer interrupt.
   int interval = 1000000; // cycles; about 1/10th second in qemu.
+  //int interval = 10000; // NOTE by CW: we may shorten the interval to have a fine-grained turnaround time record for processes but sleep (our sleep program sleeps for the given number of ticks).
   *(uint64*)CLINT_MTIMECMP(id) = *(uint64*)CLINT_MTIME + interval;
 
   // prepare information in scratch[] for timervec.
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..5afbb9a 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -165,6 +165,7 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+//printf("%d\n", ticks);
   wakeup(&ticks);
   release(&tickslock);
 }
diff --git a/user/echo2.c b/user/echo2.c
new file mode 100644
index 0000000..8dd0e62
--- /dev/null
+++ b/user/echo2.c
@@ -0,0 +1,33 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char b[3];
+  b[0] = '\\';
+  b[1] = 'n';
+  b[2] = 0;
+
+  for(i = 1; i < argc; i++){
+    if (strcmp(argv[i], b) == 0){
+      write(1, "\n", 1);
+      if(i >= argc - 1){
+        write(1, "\n", 1);
+        break;
+      } else {
+        continue;
+      }
+    }
+    write(1, argv[i], strlen(argv[i]));
+    if(i + 1 < argc){
+      write(1, " ", 1);
+    } else {
+      write(1, "\n", 1);
+    }
+  }
+  exit(0);
+}
+
diff --git a/user/sh.c b/user/sh.c
index 836ebcb..5f64140 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -10,6 +10,7 @@
 #define PIPE  3
 #define LIST  4
 #define BACK  5
+#define EXEC_REPARENT  6
 
 #define MAXARGS 10
 
@@ -80,6 +81,20 @@ runcmd(struct cmd *cmd)
     fprintf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
 
+  case EXEC_REPARENT:
+    //fprintf(1, "exec_reparent\n");
+    ecmd = (struct execcmd*)cmd;
+    uint64 index = 0;
+    for(index = 0; ecmd->argv[index]; index++) {
+      ;
+    }
+    ecmd->argv[index] = "&";
+    if(ecmd->argv[0] == 0)
+      exit(1);
+    exec(ecmd->argv[0], ecmd->argv);
+    fprintf(2, "exec %s failed\n", ecmd->argv[0]);
+    break;
+
   case REDIR:
     rcmd = (struct redircmd*)cmd;
     close(rcmd->fd);
@@ -124,6 +139,7 @@ runcmd(struct cmd *cmd)
 
   case BACK:
     bcmd = (struct backcmd*)cmd;
+    bcmd->cmd->type = EXEC_REPARENT;
     if(fork1() == 0)
       runcmd(bcmd->cmd);
     break;
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..78d7179
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,14 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  if (argc != 2) {
+        printf("Usage: sleep number-of-ticks\n");
+        exit(0);
+  }
+  int ticks = atoi(argv[1]);
+  sleep(ticks);
+  exit(0);
+}
