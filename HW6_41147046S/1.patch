diff --git a/Makefile b/Makefile
index 39a99d7..aef3b20 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_echo2\
+	$U/_sleep\
+	$U/_job\
+	$U/_testDrive\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/console.c b/kernel/console.c
index 05dc526..8cdeb38 100644
--- a/kernel/console.c
+++ b/kernel/console.c
@@ -50,6 +50,11 @@ struct {
   uint r;  // Read index
   uint w;  // Write index
   uint e;  // Edit index
+  char histBuf[5][INPUT_BUF_SIZE];
+  int histIndex;
+  int currentIndex;
+  int histSize;
+  int histOffset;
 } cons;
 
 //
@@ -138,6 +143,66 @@ consoleintr(int c)
   acquire(&cons.lock);
 
   switch(c){
+  case C('W'):
+	if (cons.histOffset == cons.histSize) {
+		printf("\a");
+		break;
+	}
+	cons.histOffset ++;
+    // kill line first
+    while(cons.e != cons.w &&
+          cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+      cons.e--;
+      consputc(BACKSPACE);
+    }
+    if (cons.histIndex == 0)
+		cons.histIndex = 4;
+	else
+		cons.histIndex --;
+    for (int i = 0; i < INPUT_BUF_SIZE; i++) {
+		if (cons.histBuf[cons.histIndex][i] != '\n') {
+			consputc(cons.histBuf[cons.histIndex][i]);
+			cons.buf[cons.e++ % INPUT_BUF_SIZE] = cons.histBuf[cons.histIndex][i];
+		} else {
+			break;
+		}
+	}
+    break;
+//  case 'l':
+//    printf("hi");
+//    cons.buf[cons.e++ % INPUT_BUF_SIZE] = 'l';
+//    break;
+  case C('S'):
+    if (cons.histOffset <= 1) {
+		// kill line first
+		while(cons.e != cons.w &&
+		  cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+			cons.e--;
+			consputc(BACKSPACE);
+		}
+		printf("\a");
+		break;
+	}
+	cons.histOffset --;
+    // kill line first
+    while(cons.e != cons.w &&
+          cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+      cons.e--;
+      consputc(BACKSPACE);
+    }
+    if (cons.histIndex == 4)
+		cons.histIndex = 0;
+	else
+		cons.histIndex ++;
+    for (int i = 0; i < INPUT_BUF_SIZE; i++) {
+		if (cons.histBuf[cons.histIndex][i] != '\n') {
+			consputc(cons.histBuf[cons.histIndex][i]);
+			cons.buf[cons.e++ % INPUT_BUF_SIZE] = cons.histBuf[cons.histIndex][i];
+		} else {
+			break;
+		}
+	}
+    break;
   case C('P'):  // Print process list.
     procdump();
     break;
@@ -166,6 +231,24 @@ consoleintr(int c)
       cons.buf[cons.e++ % INPUT_BUF_SIZE] = c;
 
       if(c == '\n' || c == C('D') || cons.e-cons.r == INPUT_BUF_SIZE){
+        // copy this line of command into a history buffer
+        uint i = cons.e-1;
+		while(i != cons.w &&
+         cons.buf[(i-1) % INPUT_BUF_SIZE] != '\n'){
+			i--;
+		}
+       int j = 0;
+		while(i != cons.e) {
+			cons.histBuf[cons.currentIndex][j] = cons.buf[i % INPUT_BUF_SIZE];
+			i++; j++;
+       }
+		cons.currentIndex = (cons.currentIndex + 1) % 5;
+		cons.histIndex = cons.currentIndex;
+		if (cons.histSize < 5)
+			cons.histSize ++;
+		cons.histOffset = 0;
+		//printf("\n", cons.buf[i]);
+
         // wake up consoleread() if a whole line (or end-of-file)
         // has arrived.
         cons.w = cons.e;
@@ -182,6 +265,10 @@ void
 consoleinit(void)
 {
   initlock(&cons.lock, "cons");
+  cons.histIndex = 0;
+  cons.currentIndex = 0;
+  cons.histSize = 0;
+  cons.histOffset = 0;
 
   uartinit();
 
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..edf5381 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -8,6 +8,7 @@
 #include "elf.h"
 
 static int loadseg(pde_t *, uint64, struct inode *, uint, uint);
+extern struct proc *initproc;
 
 int flags2perm(int flags)
 {
@@ -91,6 +92,16 @@ exec(char *path, char **argv)
   for(argc = 0; argv[argc]; argc++) {
     if(argc >= MAXARG)
       goto bad;
+    if (!argv[argc+1]) { // i.e., it is the last argument
+      if (argv[argc][0] == '&') { // is background process
+	      //printf("bg_process --- reparent it to init\n");
+	      p->parent = initproc;
+			acquire(&tickslock);
+			p->tick_exec = ticks;
+			release(&tickslock);
+	      break;
+      }
+    }
     sp -= strlen(argv[argc]) + 1;
     sp -= sp % 16; // riscv sp must be 16-byte aligned
     if(sp < stackbase)
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..00359ab 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -146,6 +146,14 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  // Set cpuid to pin init and sh to hart 1
+  if(strncmp(p->name, "init", strlen("init")) == 0 || strncmp(p->name, "sh", strlen("sh")) == 0){
+    p->cpuid = 1;
+  }
+  else{
+    p->cpuid = 0;
+  }
+  // release(&p->lock);
   return p;
 }
 
@@ -310,6 +318,13 @@ fork(void)
 
   safestrcpy(np->name, p->name, sizeof(p->name));
 
+  if(strncmp(np->name, "init", strlen("init")) == 0 || strncmp(np->name, "sh", strlen("sh")) == 0){
+    np->cpuid = 1;
+  }
+  else{
+    np->cpuid = 0;
+  }
+
   pid = np->pid;
 
   release(&np->lock);
@@ -365,6 +380,14 @@ exit(int status)
   end_op();
   p->cwd = 0;
 
+  if (p->parent == initproc)
+  {
+	acquire(&tickslock);
+	p->tick_exit = ticks;
+	release(&tickslock);
+	printf("%d Done\t\t%s %d\n", p->pid, p->name, p->tick_exit - p->tick_exec);
+  }
+
   acquire(&wait_lock);
 
   // Give any children to init.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..0d188e4 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,3 +1,6 @@
+#include "param.h"
+#include "spinlock.h"
+#include "riscv.h"
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -91,6 +94,9 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int cpuid;                   // CPU or core id
+  int priority;
+  int burst_time;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -104,4 +110,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint tick_exec;
+  uint tick_exit;
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..6471027 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -1,3 +1,5 @@
+#ifndef _RISCV_H_
+#define _RISCV_H_
 #ifndef __ASSEMBLER__
 
 // which hart (core) is this?
@@ -361,3 +363,4 @@ typedef uint64 *pagetable_t; // 512 PTEs
 // Sv39, to avoid having to sign-extend virtual addresses
 // that have the high bit set.
 #define MAXVA (1L << (9 + 9 + 9 + 12 - 1))
+#endif // _RISCV_H_
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 4392820..5aa11e4 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -1,3 +1,5 @@
+#ifndef _SPINLOCK_H_
+#define _SPINLOCK_H_
 // Mutual exclusion lock.
 struct spinlock {
   uint locked;       // Is the lock held?
@@ -6,4 +8,5 @@ struct spinlock {
   char *name;        // Name of lock.
   struct cpu *cpu;   // The cpu holding the lock.
 };
+#endif // _SPINLOCK_H_
 
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..74177b8 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -67,6 +67,7 @@ timerinit()
 
   // ask the CLINT for a timer interrupt.
   int interval = 1000000; // cycles; about 1/10th second in qemu.
+  //int interval = 10000; // NOTE by CW: we may shorten the interval to have a fine-grained turnaround time record for processes but sleep (our sleep program sleeps for the given number of ticks).
   *(uint64*)CLINT_MTIMECMP(id) = *(uint64*)CLINT_MTIME + interval;
 
   // prepare information in scratch[] for timervec.
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..5afbb9a 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -165,6 +165,7 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+//printf("%d\n", ticks);
   wakeup(&ticks);
   release(&tickslock);
 }
diff --git a/user/job.c b/user/job.c
new file mode 100644
index 0000000..854753f
--- /dev/null
+++ b/user/job.c
@@ -0,0 +1,34 @@
+#include "kernel/types.h"
+#include "user/user.h"
+int get_ticks(void){
+    return uptime();
+}
+int job_wait(int length){
+    int start_time = get_ticks();
+    while(get_ticks() - start_time < length){}
+    int end_time = get_ticks();
+    int turnaround_time = end_time - start_time;
+    return turnaround_time;
+}
+
+int main(int argc, char *argv[]){
+    if(argc != 2){
+        printf("Usage: job <length in ticks>\n");
+        exit(1);
+    }
+    int length = atoi(argv[1]);
+    int pid = fork();
+    if(pid < 0){
+        printf("Fork failed\n");
+        exit(1);
+    }
+    else if(pid == 0){
+        int turnaround_time = job_wait(length);
+        printf("Job length: %d ticks, Tuaround time: %d ticks\n", length, turnaround_time);
+    }
+    else{
+        wait(0);
+        exit(0);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/sh.c b/user/sh.c
index 836ebcb..9cd1073 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -10,8 +10,9 @@
 #define PIPE  3
 #define LIST  4
 #define BACK  5
+#define EXEC_REPARENT  6
 
-#define MAXARGS 10
+#define MAXARGS 15
 
 struct cmd {
   int type;
@@ -80,6 +81,20 @@ runcmd(struct cmd *cmd)
     fprintf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
 
+  case EXEC_REPARENT:
+    //fprintf(1, "exec_reparent\n");
+    ecmd = (struct execcmd*)cmd;
+    uint64 index = 0;
+    for(index = 0; ecmd->argv[index]; index++) {
+      ;
+    }
+    ecmd->argv[index] = "&";
+    if(ecmd->argv[0] == 0)
+      exit(1);
+    exec(ecmd->argv[0], ecmd->argv);
+    fprintf(2, "exec %s failed\n", ecmd->argv[0]);
+    break;
+
   case REDIR:
     rcmd = (struct redircmd*)cmd;
     close(rcmd->fd);
@@ -124,6 +139,7 @@ runcmd(struct cmd *cmd)
 
   case BACK:
     bcmd = (struct backcmd*)cmd;
+    bcmd->cmd->type = EXEC_REPARENT;
     if(fork1() == 0)
       runcmd(bcmd->cmd);
     break;
